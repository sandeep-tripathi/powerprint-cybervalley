
import { useState } from "react";
import { useApiKey } from "@/hooks/useApiKey";
import { use3DGeneration } from "@/hooks/use3DGeneration";
import ViewerControls from "@/components/ViewerControls";
import ThreeDCanvas from "@/components/ThreeDCanvas";
import ModelInfo from "@/components/ModelInfo";
import ModelPropertyEditor from "@/components/ModelPropertyEditor";
import ObjFileUpload from "@/components/ObjFileUpload";
import LLMManipulation from "@/components/LLMManipulation";
import PrintingValidation from "@/components/PrintingValidation";
import { ParsedObjData } from "@/components/ObjFileParser";
import { useToast } from "@/hooks/use-toast";

interface ModelViewer3DProps {
  capturedImages?: File[];
  onModelGenerated?: (modelName: string, imageNames: string[], modelData: any, processingTime: number) => void;
}

const ModelViewer3D = ({ capturedImages = [], onModelGenerated }: ModelViewer3DProps) => {
  const [uploadedObj, setUploadedObj] = useState<{ data: ParsedObjData; fileName: string } | null>(null);
  const [llmLoading, setLlmLoading] = useState(false);
  const { toast } = useToast();

  const {
    apiKey,
    setApiKey,
    showApiInput,
    setShowApiInput,
    updateApiKey,
    showApiKeyInput,
  } = useApiKey();

  const {
    isLoading,
    hasModel,
    generationStatus,
    generatedModel,
    updateGeneratedModel,
  } = use3DGeneration({
    apiKey,
    showApiKeyInput,
    uploadedImages: capturedImages,
    onModelGenerated,
  });

  const handleObjLoaded = (objData: ParsedObjData, fileName: string) => {
    setUploadedObj({ data: objData, fileName });
  };

  const handleRemoveObj = () => {
    setUploadedObj(null);
  };

  const resetView = () => {
    console.log("Reset view");
  };

  const downloadModel = () => {
    if (!generatedModel?.realMesh) return;

    // Create a simple OBJ file content
    const vertices = generatedModel.realMesh.vertices;
    const faces = generatedModel.realMesh.faces;
    
    let objContent = "# Generated by Vision AI 3D Converter\n";
    
    // Add vertices
    for (let i = 0; i < vertices.length; i += 3) {
      objContent += `v ${vertices[i]} ${vertices[i + 1]} ${vertices[i + 2]}\n`;
    }
    
    // Add faces
    for (let i = 0; i < faces.length; i += 3) {
      objContent += `f ${faces[i] + 1} ${faces[i + 1] + 1} ${faces[i + 2] + 1}\n`;
    }

    const blob = new Blob([objContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `vision-3d-model-${Date.now()}.obj`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    console.log("Vision AI 3D model downloaded");
  };

  const handleLLMManipulation = async (instruction: string) => {
    setLlmLoading(true);
    // Simulate LLM processing
    await new Promise(resolve => setTimeout(resolve, 2000));
    console.log("LLM manipulation instruction:", instruction);
    setLlmLoading(false);
  };

  const handlePrintingValidation = async () => {
    // Simulate validation logic
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    return {
      isValid: Math.random() > 0.3, // 70% chance of being valid
      warnings: [
        "Wall thickness is below recommended 0.8mm in some areas",
        "Some overhangs may require support structures"
      ],
      errors: Math.random() > 0.7 ? ["Model contains non-manifold edges"] : [],
      recommendations: [
        "Consider increasing wall thickness for better durability",
        "Optimize orientation for minimal support material"
      ]
    };
  };

  const showManipulationTools = uploadedObj || (capturedImages.length === 0 && !generatedModel);

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-white">3D Model Viewer</h2>
          <p className="text-sm text-purple-300">
            Advanced Vision AI • Enhanced 3D Generation • Camera Capture • Image Upload
          </p>
        </div>
        
        <ViewerControls
          hasModel={hasModel || !!uploadedObj}
          uploadedImages={capturedImages}
          generatedModel={generatedModel}
          onResetView={resetView}
          onDownloadOBJ={downloadModel}
        />
      </div>

      {/* OBJ File Upload */}
      <ObjFileUpload
        onObjLoaded={handleObjLoaded}
        onRemoveObj={handleRemoveObj}
        uploadedObj={uploadedObj}
      />

      <div className="bg-white rounded-xl border border-gray-200 overflow-hidden">
        <div className="aspect-video bg-black relative">
          <ThreeDCanvas
            isLoading={isLoading}
            generationStatus={generationStatus}
            uploadedImages={capturedImages}
            generatedModel={generatedModel}
            uploadedObj={uploadedObj}
          />
        </div>

        <ModelInfo uploadedImages={capturedImages} />
      </div>

      {/* LLM Manipulation and Printing Validation - Show for OBJ files or default ring */}
      {showManipulationTools && (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <LLMManipulation
            onManipulate={handleLLMManipulation}
            isLoading={llmLoading}
          />
          <PrintingValidation
            onValidate={handlePrintingValidation}
            isLoading={llmLoading}
          />
        </div>
      )}

      {/* Property Editor - Only show when model is generated */}
      {generatedModel && !isLoading && (
        <ModelPropertyEditor
          generatedModel={generatedModel}
          onModelUpdate={updateGeneratedModel}
        />
      )}

      <div className="text-xs text-purple-200 space-y-1">
        <p>• Advanced Vision AI • Enhanced 3D Generation • Real-time Processing • High-Quality Results</p>
        <p>• Vision language models • Depth analysis • Intelligent mesh generation • Export: OBJ format</p>
        {generatedModel && (
          <p>• Model Stats: {generatedModel.vertices.toLocaleString()} vertices, {generatedModel.faces.toLocaleString()} faces, Quality: {generatedModel.qualityScore ? (generatedModel.qualityScore * 100).toFixed(1) + '%' : 'N/A'}</p>
        )}
        {uploadedObj && (
          <p>• OBJ File: {uploadedObj.fileName} • {(uploadedObj.data.vertices.length / 3).toLocaleString()} vertices</p>
        )}
      </div>
    </div>
  );
};

export default ModelViewer3D;
