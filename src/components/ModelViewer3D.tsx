
import { useState } from "react";
import { useApiKey } from "@/hooks/useApiKey";
import { use3DGeneration } from "@/hooks/use3DGeneration";
import ViewerControls from "@/components/ViewerControls";
import ThreeDCanvas from "@/components/ThreeDCanvas";
import ModelInfo from "@/components/ModelInfo";
import ModelPropertyEditor from "@/components/ModelPropertyEditor";
import CompactModelManipulation from "@/components/CompactModelManipulation";
import CompactPrintingValidation from "@/components/CompactPrintingValidation";
import { ParsedObjData } from "@/components/ObjFileParser";
import { useToast } from "@/hooks/use-toast";

interface ModelViewer3DProps {
  capturedImages?: File[];
  onModelGenerated?: (modelName: string, imageNames: string[], modelData: any, processingTime: number) => void;
}

const ModelViewer3D = ({ capturedImages = [], onModelGenerated }: ModelViewer3DProps) => {
  const [llmLoading, setLlmLoading] = useState(false);
  const { toast } = useToast();

  const {
    apiKey,
    setApiKey,
    showApiInput,
    setShowApiInput,
    updateApiKey,
    showApiKeyInput,
  } = useApiKey();

  const {
    isLoading,
    hasModel,
    generationStatus,
    generatedModel,
    updateGeneratedModel,
  } = use3DGeneration({
    apiKey,
    showApiKeyInput,
    uploadedImages: capturedImages,
    onModelGenerated,
  });

  const resetView = () => {
    console.log("Reset view");
  };

  const downloadModel = () => {
    if (!generatedModel?.realMesh) return;

    // Create a simple OBJ file content
    const vertices = generatedModel.realMesh.vertices;
    const faces = generatedModel.realMesh.faces;
    
    let objContent = "# Generated by PowerPrint\n";
    
    // Add vertices
    for (let i = 0; i < vertices.length; i += 3) {
      objContent += `v ${vertices[i]} ${vertices[i + 1]} ${vertices[i + 2]}\n`;
    }
    
    // Add faces
    for (let i = 0; i < faces.length; i += 3) {
      objContent += `f ${faces[i] + 1} ${faces[i + 1] + 1} ${faces[i + 2] + 1}\n`;
    }

    const blob = new Blob([objContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `powerprint-model-${Date.now()}.obj`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    console.log("PowerPrint model downloaded");
  };

  const handleLLMManipulation = async (instruction: string) => {
    setLlmLoading(true);
    // Simulate LLM processing
    await new Promise(resolve => setTimeout(resolve, 2000));
    console.log("LLM manipulation instruction:", instruction);
    setLlmLoading(false);
  };

  const handlePrintingValidation = async () => {
    // Simulate validation logic
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    return {
      isValid: Math.random() > 0.3, // 70% chance of being valid
      warnings: [
        "Wall thickness is below recommended 0.8mm in some areas",
        "Some overhangs may require support structures"
      ],
      errors: Math.random() > 0.7 ? ["Model contains non-manifold edges"] : [],
      recommendations: [
        "Consider increasing wall thickness for better durability",
        "Optimize orientation for minimal support material"
      ]
    };
  };

  // Show manipulation tools when there are no uploaded images (default panda) or when model is generated
  const showManipulationTools = capturedImages.length === 0 || generatedModel;

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <ViewerControls
            hasModel={hasModel}
            uploadedImages={capturedImages}
            generatedModel={generatedModel}
            onResetView={resetView}
            onDownloadOBJ={downloadModel}
          />
          
          {/* Show manipulation tools for default panda or generated models */}
          {showManipulationTools && (
            <div className="flex items-center space-x-4">
              {/* Step 2: Model manipulation */}
              <div className="flex flex-col items-center space-y-2">
                <div className="flex items-center space-x-2">
                  <span className="inline-flex items-center justify-center w-6 h-6 bg-purple-600 text-white rounded-full font-semibold text-xs">
                    2
                  </span>
                  <span className="text-white text-sm font-medium">Model manipulation</span>
                </div>
                <CompactModelManipulation
                  onManipulate={handleLLMManipulation}
                  isLoading={llmLoading}
                />
              </div>
              
              {/* Step 3: 3D Print validation */}
              <div className="flex flex-col items-center space-y-2">
                <div className="flex items-center space-x-2">
                  <span className="inline-flex items-center justify-center w-6 h-6 bg-green-600 text-white rounded-full font-semibold text-xs">
                    3
                  </span>
                  <span className="text-white text-sm font-medium">3D Print validation</span>
                </div>
                <CompactPrintingValidation
                  onValidate={handlePrintingValidation}
                  isLoading={llmLoading}
                />
              </div>
            </div>
          )}
        </div>
      </div>

      <div className="bg-white rounded-xl border border-gray-200 overflow-hidden">
        <div className="aspect-video bg-black relative">
          <ThreeDCanvas
            isLoading={isLoading}
            generationStatus={generationStatus}
            uploadedImages={capturedImages}
            generatedModel={generatedModel}
            uploadedObj={null}
          />
        </div>

        <ModelInfo uploadedImages={capturedImages} />
      </div>

      {/* Property Editor - Only show when model is generated */}
      {generatedModel && !isLoading && (
        <ModelPropertyEditor
          generatedModel={generatedModel}
          onModelUpdate={updateGeneratedModel}
        />
      )}
    </div>
  );
};

export default ModelViewer3D;
