
import { Canvas } from "@react-three/fiber";
import { OrbitControls, Grid, Environment } from "@react-three/drei";
import { Download, Share2, ZoomIn, ZoomOut, RotateCcw, Maximize2 } from "lucide-react";
import PowerPrintModel from "./PowerPrintModel";
import ObjViewer from "./ObjViewer";
import DefaultRing from "./DefaultRing";
import { ParsedObjData } from "./ObjFileParser";

interface ThreeDCanvasProps {
  isLoading: boolean;
  generationStatus: string;
  uploadedImages: File[];
  generatedModel?: {
    meshData: any;
    textureUrl: string;
    complexity: number;
    vertices: number;
    faces: number;
    qualityScore?: number;
  } | null;
  uploadedObj?: {
    data: ParsedObjData;
    fileName: string;
  } | null;
}

const ThreeDCanvas = ({ 
  isLoading, 
  generationStatus, 
  uploadedImages, 
  generatedModel,
  uploadedObj 
}: ThreeDCanvasProps) => {
  const handleDownload = () => {
    if (generatedModel?.realMesh) {
      const vertices = generatedModel.realMesh.vertices;
      const faces = generatedModel.realMesh.faces;
      
      let objContent = "# Generated by PowerPrint\n";
      
      for (let i = 0; i < vertices.length; i += 3) {
        objContent += `v ${vertices[i]} ${vertices[i + 1]} ${vertices[i + 2]}\n`;
      }
      
      for (let i = 0; i < faces.length; i += 3) {
        objContent += `f ${faces[i] + 1} ${faces[i + 1] + 1} ${faces[i + 2] + 1}\n`;
      }

      const blob = new Blob([objContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `powerprint-model-${Date.now()}.obj`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    } else {
      // Default panda download
      const objContent = `# 3D Panda Model\n# Generated by PowerPrint\nv 0 0 0\nv 1 0 0\nv 0 1 0\nf 1 2 3\n`;
      const blob = new Blob([objContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `3d-panda-${Date.now()}.obj`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    }
  };

  const handleShare = () => {
    if (navigator.share) {
      navigator.share({
        title: 'PowerPrint 3D Model',
        text: 'Check out this 3D model generated with PowerPrint!',
        url: window.location.href,
      });
    } else {
      navigator.clipboard.writeText(window.location.href);
      console.log('Link copied to clipboard');
    }
  };

  if (isLoading) {
    return (
      <div className="absolute inset-0 flex items-center justify-center">
        <div className="text-center">
          <div className="relative mb-4">
            <div className="w-16 h-16 border-4 border-purple-500/30 rounded-full"></div>
            <div className="absolute inset-0 w-16 h-16 border-4 border-purple-500 border-t-transparent rounded-full animate-spin"></div>
          </div>
          <p className="text-white font-medium">Vision AI Processing...</p>
          <p className="text-purple-300 text-sm">{generationStatus}</p>
          <div className="mt-2 text-xs text-gray-400">
            Using advanced vision language models
          </div>
        </div>
      </div>
    );
  }

  const showDefaultRing = uploadedImages.length === 0 && !uploadedObj && !generatedModel;

  return (
    <div className="w-full h-full bg-gray-900 rounded-lg relative">
      {/* Viewer Controls - Now inside the canvas */}
      <div className="absolute top-4 right-4 z-10 flex flex-wrap gap-2">
        <button 
          className="p-2 bg-gray-800/80 hover:bg-gray-700 rounded-lg transition-colors backdrop-blur-sm"
          title="Reset View"
        >
          <RotateCcw className="w-4 h-4 text-white" />
        </button>
        <button 
          className="p-2 bg-gray-800/80 hover:bg-gray-700 rounded-lg transition-colors backdrop-blur-sm"
          title="Zoom In"
        >
          <ZoomIn className="w-4 h-4 text-white" />
        </button>
        <button 
          className="p-2 bg-gray-800/80 hover:bg-gray-700 rounded-lg transition-colors backdrop-blur-sm"
          title="Zoom Out"
        >
          <ZoomOut className="w-4 h-4 text-white" />
        </button>
        <button 
          className="p-2 bg-gray-800/80 hover:bg-gray-700 rounded-lg transition-colors backdrop-blur-sm"
          title="Fullscreen"
        >
          <Maximize2 className="w-4 h-4 text-white" />
        </button>
        <button
          onClick={handleDownload}
          className="p-2 bg-purple-600/80 hover:bg-purple-700 rounded-lg transition-colors backdrop-blur-sm"
          title="Download 3D Model"
        >
          <Download className="w-4 h-4 text-white" />
        </button>
        <button
          onClick={handleShare}
          className="p-2 bg-blue-600/80 hover:bg-blue-700 rounded-lg transition-colors backdrop-blur-sm"
          title="Share Model"
        >
          <Share2 className="w-4 h-4 text-white" />
        </button>
      </div>

      <Canvas camera={{ position: [6, 6, 6], fov: 60 }}>
        <ambientLight intensity={0.3} />
        <directionalLight position={[10, 10, 5]} intensity={1.2} />
        <pointLight position={[-10, -10, -10]} intensity={0.6} />
        <spotLight position={[0, 15, 0]} intensity={0.8} angle={0.3} />

        <Environment preset="studio" />

        <Grid
          args={[20, 20]}
          cellSize={1}
          cellThickness={0.5}
          cellColor="#444444"
          sectionSize={5}
          sectionThickness={1}
          sectionColor="#666666"
          fadeDistance={30}
          fadeStrength={1}
          infiniteGrid
        />

        {showDefaultRing && <DefaultRing animate={true} />}

        {generatedModel && (
          <PowerPrintModel
            modelData={generatedModel}
            animate={true}
          />
        )}

        {uploadedObj && (
          <ObjViewer
            objData={uploadedObj.data}
            animate={true}
          />
        )}

        <OrbitControls
          enablePan={true}
          enableZoom={true}
          enableRotate={true}
          minDistance={3}
          maxDistance={15}
          autoRotate={false}
        />
      </Canvas>

      <div className="absolute bottom-4 left-4">
        {generatedModel ? (
          <div>
            <p className="text-white font-medium text-sm">
              PowerPrint Model Generated
            </p>
            <p className="text-purple-300 text-xs">
              {generatedModel.vertices.toLocaleString()} vertices • {generatedModel.faces.toLocaleString()} faces
              {generatedModel.qualityScore && ` • Quality: ${(generatedModel.qualityScore * 100).toFixed(1)}%`}
            </p>
            <p className="text-gray-300 text-xs">
              Click and drag to rotate • Scroll to zoom
            </p>
          </div>
        ) : uploadedObj ? (
          <div>
            <p className="text-white font-medium text-sm">
              OBJ File: {uploadedObj.fileName}
            </p>
            <p className="text-purple-300 text-xs">
              {(uploadedObj.data.vertices.length / 3).toLocaleString()} vertices
            </p>
            <p className="text-gray-300 text-xs">
              Click and drag to rotate • Scroll to zoom
            </p>
          </div>
        ) : (
          <p className="text-gray-400 text-sm">
            3D Panda Model Ready
          </p>
        )}
      </div>
    </div>
  );
};

export default ThreeDCanvas;
